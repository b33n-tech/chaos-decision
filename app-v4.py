import streamlit as st
import random
import numpy as np
import matplotlib.pyplot as plt

st.set_page_config(page_title="Simulateur avanc√© d'inertie structurelle", layout="wide")

class DecisionAgent:
    def __init__(self, procrastination, pessimism, loss_aversion, scarcity, avoidance, pressure, invisibilisation, visibilite_coulisses):
        self.procrastination = procrastination
        self.pessimism = pessimism
        self.loss_aversion = loss_aversion
        self.scarcity = scarcity
        self.avoidance = avoidance
        self.pressure = pressure
        self.invisibilisation = invisibilisation
        self.visibilite_coulisses = visibilite_coulisses

    def simulate(self):
        outcome = "ind√©cision"
        decision_progress = 0
        time_elapsed = 0
        steps = []
        progress_history = []

        while outcome == "ind√©cision" and time_elapsed < 12:
            time_elapsed += 1
            base_step = f"Mois {time_elapsed} : "

            if random.random() < self.pessimism / 15:
                steps.append(base_step + "vision n√©gative ‚Üí inertie.")
                progress_history.append(decision_progress)
                continue

            if random.random() < self.procrastination / 12:
                steps.append(base_step + "report de la d√©cision.")
                progress_history.append(decision_progress)
                continue

            if random.random() < self.scarcity / 12:
                steps.append(base_step + "r√©duction des options ‚Üí statu quo.")
                progress_history.append(decision_progress)
                continue

            if random.random() < self.invisibilisation / 15:
                decision_progress -= 1
                steps.append(base_step + "action invisible ‚Üí sentiment d‚Äôinutilit√©.")
                progress_history.append(decision_progress)
                continue

            if self.invisibilisation > 8 and random.random() < 0.5:
                steps.append(base_step + "auto-effacement ‚Üí renoncement silencieux.")
                progress_history.append(decision_progress)
                continue

            if random.random() < self.pressure / 10:
                decision_progress += 3
                steps.append(base_step + "pression ext√©rieure ‚Üí tentative d‚Äôaction.")
            else:
                decision_progress += 1
                steps.append(base_step + "r√©flexion / micro-action.")

            if random.random() < self.loss_aversion / 15:
                decision_progress -= 1
                steps[-1] += " ‚Üí doute post-action."

            progress_history.append(decision_progress)

            if decision_progress >= 8:
                outcome = "succ√®s"
            elif decision_progress <= -5:
                outcome = "√©chec"

        if time_elapsed >= 12 and outcome == "ind√©cision":
            outcome = "report ind√©fini"

        return steps, outcome, progress_history

    def calculate_inertia_score(self):
        score_cognitif = (self.procrastination + self.pessimism + self.loss_aversion + self.avoidance) * 2.5
        score_conjoncturel = (self.scarcity + (10 - self.pressure)) * 5
        score_structurel = self.invisibilisation * 10
        amplificateur_visibilite = 1 + (10 - self.visibilite_coulisses) * 0.05
        total_brut = score_cognitif + score_conjoncturel + score_structurel
        total = total_brut * amplificateur_visibilite
        return {
            "cognitif": score_cognitif,
            "conjoncturel": score_conjoncturel,
            "structurel": score_structurel,
            "total_brut": total_brut,
            "total": total,
            "amplificateur_visibilite": amplificateur_visibilite
        }

def get_posture_and_advice(score):
    if score < 120:
        posture = "Tu as un bon potentiel d'action. Reste vigilant et mobilise tes ressources."
        advice = "Profite de cette dynamique pour avancer par petits pas, chercher du soutien et c√©l√©brer tes succ√®s."
    elif score < 180:
        posture = "L‚Äôinertie est pr√©sente mais surmontable avec de la pers√©v√©rance."
        advice = ("Pr√©pare-toi √† batailler, mais garde l'espoir. "
                  "Concentre-toi sur ce que tu peux contr√¥ler et avance un pas √† la fois.")
    elif score < 240:
        posture = "Les blocages sont s√©rieux, il faudra de la t√©nacit√© et une strat√©gie claire."
        advice = ("Identifie clairement les moments o√π tu peux agir, "
                  "et apprends √† prot√©ger ton √©nergie. Cultive ta r√©silience.")
    else:
        posture = "Le syst√®me p√®se lourdement, mais tu incarnes la force qui peut r√©sister."
        advice = ("Sois patient¬∑e, essaie de trouver des alli√©s, "
                  "et garde la foi en ta capacit√© √† faire bouger les lignes, m√™me √† petits pas.")
    return posture, advice

st.title("üß† Simulateur avanc√© d'inertie structurelle avec posture actionable")

st.markdown("""
Ce simulateur mod√©lise l‚Äôimpact combin√© de biais cognitifs, contextuels, invisibilisation structurelle et visibilit√© des coulisses sur la prise de d√©cision.  
Il propose aussi une **posture concr√®te** pour avancer, au-del√† des blocages.
""")

with st.sidebar:
    st.header("üîß Param√®tres du profil")
    procrastination = st.slider("‚è≥ Procrastination", 0, 10, 5)
    pessimism = st.slider("üåßÔ∏è Vision pessimiste", 0, 10, 5)
    loss_aversion = st.slider("‚öñÔ∏è Aversion √† la perte", 0, 10, 5)
    scarcity = st.slider("üö™ Mentalit√© de raret√©", 0, 10, 5)
    avoidance = st.slider("üôà √âvitement d√©cisionnel", 0, 10, 5)
    pressure = st.slider("üî• Pression ext√©rieure", 0, 10, 5)
    invisibilisation = st.slider("üëª Invisibilisation structurelle", 0, 10, 5)
    visibilite_coulisses = st.slider("üîç Visibilit√© sur les coulisses (transparence interne)", 0, 10, 5)

    if st.button("üé≤ Lancer la simulation"):
        agent = DecisionAgent(
            procrastination,
            pessimism,
            loss_aversion,
            scarcity,
            avoidance,
            pressure,
            invisibilisation,
            visibilite_coulisses
        )
        story, outcome, progress_history = agent.simulate()
        inertia_scores = agent.calculate_inertia_score()
        st.session_state["story"] = story
        st.session_state["outcome"] = outcome
        st.session_state["progress_history"] = progress_history
        st.session_state["inertia_scores"] = inertia_scores
        st.session_state["visibilite_coulisses"] = visibilite_coulisses

if "story" in st.session_state:
    st.subheader("üìú Sc√©nario simul√© mois par mois")
    for line in st.session_state["story"]:
        st.markdown(f"- {line}")

    st.subheader("üéØ R√©sultat final")
    emoji = {
        "succ√®s": "‚úÖ",
        "√©chec": "‚ùå",
        "report ind√©fini": "‚è∏Ô∏è",
        "ind√©cision": "ü§∑‚Äç‚ôÇÔ∏è"
    }
    st.markdown(f"### {emoji.get(st.session_state['outcome'], '')} **{st.session_state['outcome'].upper()}**")

    st.subheader("üß≠ Score d'inertie structurelle")
    s = st.session_state["inertia_scores"]
    ampl = s["amplificateur_visibilite"]
    st.markdown(f"""
    - Cognitif : **{s['cognitif']:.1f} / 100**  
    - Conjoncturel : **{s['conjoncturel']:.1f} / 100**  
    - Structurel : **{s['structurel']:.1f} / 100**  
    - Score brut : **{s['total_brut']:.1f}**  
    - Amplificateur visibilit√© : **{ampl:.2f}** (1 = transparence totale, 1.5 = opaque)  
    - **Score total corrig√© : {s['total']:.1f}** (prise en compte visibilit√©)  
    """)

    # Interpr√©tation du score total corrig√©
    total_corrige = s["total"]
    st.subheader("üí° Interpr√©tation du score total corrig√©")
    if total_corrige < 120:
        st.success("üå± Faible inertie : dynamique activable, leviers d‚Äôaction possibles.")
    elif total_corrige < 180:
        st.warning("üåÄ Inertie mod√©r√©e : effort co√ªteux, vigilance n√©cessaire.")
    elif total_corrige < 240:
        st.error("üßä Inertie significative : blocages structurels notables.")
    else:
        st.error("üõë Blocage structurel majeur : le syst√®me d√©courage fortement l‚Äôaction.")

    # Diagramme radar
    st.subheader("üìà Triangulation de l'inertie (psychique, mat√©riel, structurel)")
    labels = ['Cognitif', 'Conjoncturel', 'Structurel']
    values = [s['cognitif'], s['conjoncturel'], s['structurel']]
    angles = np.linspace(0, 2 * np.pi, len(labels), endpoint=False).tolist()
    values += values[:1]
    angles += angles[:1]

    fig, ax = plt.subplots(figsize=(6,6), subplot_kw=dict(polar=True))
    ax.fill(angles, values, color='skyblue', alpha=0.7)
    ax.plot(angles, values, color='blue', linewidth=2)
    ax.set_yticklabels([])
    ax.set_xticks(angles[:-1])
    ax.set_xticklabels(labels)
    ax.set_title("Radar de l'inertie structurelle", fontsize=14, pad=20)
    st.pyplot(fig)

    # Frise chronologique de la progression d√©cisionnelle
    st.subheader("üìÖ Frise chronologique de la progression d√©cisionnelle")
    progress = st.session_state["progress_history"]
    months = list(range(1, len(progress)+1))
    fig2, ax2 = plt.subplots(figsize=(10,3))
    ax2.plot(months, progress, marker='o', color='tab:green')
    ax2.axhline(y=8, color='tab:blue', linestyle='--', label="Seuil succ√®s")
    ax2.axhline(y=-5, color='tab:red', linestyle='--', label="Seuil √©chec")
    ax2.set_xlabel("Mois")
    ax2.set_ylabel("Progression d√©cisionnelle")
    ax2.set_xticks(months)
    ax2.set_ylim(min(progress)-1, max(progress)+1)
    ax2.legend()
    ax2.grid(True)
    st.pyplot(fig2)

    # === NOUVELLE PARTIE POSTURE & CONSEILS ===
    st.subheader("üöÄ Comment avancer malgr√© tout ?")

    posture, advice = get_posture_and_advice(total_corrige)
    st.markdown(f"**Posture recommand√©e :**\n\n> {posture}")

    formatted_advice = advice.replace('. ', '.  \n- ')
    st.markdown(f"**Conseils pratiques :**\n\n- {formatted_advice}")
